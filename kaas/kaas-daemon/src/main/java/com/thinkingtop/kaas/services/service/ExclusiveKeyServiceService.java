
package com.thinkingtop.kaas.services.service;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import com.thinkingtop.kaas.daemon.client.KaasDaemonPropertiesReader;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
/*
 * completed format annotation is:
 * @WebServiceClient(name = "ExclusiveKeyServiceService", targetNamespace = "http://service.services.kaas.thinkingtop.com/", wsdlLocation = "http://192.168.1.106:8080/kaas-service/services/Service?wsdl")
 * but for the dynamic ip configuration, we cut the part which means wsdlLocation.
 */
@WebServiceClient(name = "ExclusiveKeyServiceService", targetNamespace = "http://service.services.kaas.thinkingtop.com/")
public class ExclusiveKeyServiceService
    extends Service
{
    private final static URL EXCLUSIVEKEYSERVICESERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(com.thinkingtop.kaas.services.service.ExclusiveKeyServiceService.class.getName());

    static {
    	String ipAndPort = KaasDaemonPropertiesReader.getProp("webServiceIPAndPort");
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = com.thinkingtop.kaas.services.service.ExclusiveKeyServiceService.class.getResource(".");
            url = new URL(baseUrl, "http://"+ipAndPort+"/kaas-service/services/Service?wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://'"+ipAndPort+"':8080/kaas-service/services/Service?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        EXCLUSIVEKEYSERVICESERVICE_WSDL_LOCATION = url;
    }

    public ExclusiveKeyServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ExclusiveKeyServiceService() {
        super(EXCLUSIVEKEYSERVICESERVICE_WSDL_LOCATION, new QName("http://service.services.kaas.thinkingtop.com/", "ExclusiveKeyServiceService"));
    }

    /**
     * 
     * @return
     *     returns ExclusiveKeyService
     */
    @WebEndpoint(name = "ExclusiveKeyServicePort")
    public ExclusiveKeyService getExclusiveKeyServicePort() {
        return super.getPort(new QName("http://service.services.kaas.thinkingtop.com/", "ExclusiveKeyServicePort"), ExclusiveKeyService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ExclusiveKeyService
     */
    @WebEndpoint(name = "ExclusiveKeyServicePort")
    public ExclusiveKeyService getExclusiveKeyServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://service.services.kaas.thinkingtop.com/", "ExclusiveKeyServicePort"), ExclusiveKeyService.class, features);
    }

}
